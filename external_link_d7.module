<?php

/**
 * @file
 * Module file for Node Example module.
 *
 * Part of the Examples for Developers project.
 */

/**
 * @defgroup external_link_d7 Example: Node
 * @ingroup examples
 * @{
 * Example defining a node type in code.
 *
 * This is an example outlining how a module can be used to define a new
 * node type. Our example node type will allow users to specify multiple
 * "colors", a "quantity" and an "image" for their nodes; some kind of
 * rudimentary inventory-tracking system, perhaps?
 *
 * The basic pattern for defining a node type is to tell Drupal about the
 * node's fields and view modes. Drupal will then take over and manage
 * the storage for this node type. This differs from Drupal 6, where we
 * would have to handle all the database storage ourselves in the module.
 *
 * Remember that most node types do not require any custom code, as one
 * simply creates them using the Drupal user interface. Creating a node like
 * this in code is a special case.
 *
 * At absolute minimum, in order to provide a content type for
 * node, you have to implement hook_node_info() and hook_form().
 * Node can take care of the rest, if you want it to.
 *
 * First and foremost, defining a node type happens in
 * hook_node_info(). Our implementation of this hook gives
 * Drupal an array of information about the content type
 * we want to create.
 *
 * Next, since we want to add fields to our content type, we
 * implement hook_node_type_insert(), which gives us a chance
 * to modify recently-created content types.
 *
 * Drupal is able to handle deletion of our content, including
 * dependencies based on re-use of our field instances, so we don't
 * have to manage any of it.
 *
 * In previous versions of Drupal, "teaser" and "page" were node view modes.
 * In Drupal 7 we can define custom view modes to let the node know how it
 * should return it's data.  This module declares a custom view mode called
 * "external_link_d7_list".
 *
 * Consult the @link http://drupal.org/node/707832 Field API Tutorial @endlink
 * and @link http://drupal.org/node/443536 Field API Handbook Page @endlink
 * and @link field Field API documentation @endlink.
 *
 * @see field_example.module
 */

/**
 * Implements hook_menu().
 *
 * We are providing a default page to illustrate the use of our custom node view
 * mode that will live at http://example.com/?q=examples/external_link_d7
 */
function external_link_d7_menu() {
  $items['examples/external_link_d7'] = array(
    'page callback' => 'external_link_d7_page',
    'access arguments' => array('access content'),
    'title' => 'Node Example',
  );
  return $items;
}

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function external_link_d7_node_info() {
  // We define the node type as an associative array.
  return array(
    'external_link_d7' => array(
      'name' => t('External Link Page'),
      // 'base' tells Drupal the base string for hook functions.
      // This is often the module name; if base is set to 'mymodule',
      // Drupal would call mymodule_insert() or similar for node
      // hooks. In our case, the base is 'external_link_d7'.
      'base' => 'external_link_d7',
      'description' => t('This is an external link page for content on the site that when viewed redirects to an external url.'),
      'has_title' => TRUE,
      'title_label' => t('Link Title'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/external-link.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function external_link_d7_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Callback that builds our content and returns it to the browser.
 *
 * This callback comes from hook_menu().
 *
 * @return array
 *   A renderable array showing a list of our nodes.
 *
 * @see node_load()
 * @see node_view()
 * @see external_link_d7_field_formatter_view()
 */
function external_link_d7_page() {
  // We'll start building a renderable array that will be our page.
  // For now we just declare the array.
  $renderable_array = array();
  // We query the database and find all of the nodes for the type we defined.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type AND n.status = :status';
  $result = db_query($sql,
    array(
      ':type' => 'external_link_d7',
      ':status' => 1,
    )
  );
  $renderable_array['explanation'] = array(
    '#markup' => t("External Link nodes you've created will be displayed here. Note that the color fields will be displayed differently in this list, than if you view the node normally. Click on the node title to see the difference. This is a result of using our 'external_link_d7_list' node view type."),
  );
  // Loop through each of our external_link_d7 nodes and instruct node_view
  // to use our "external_link_d7_list" view.
  // http://api.drupal.org/api/function/node_load/7
  // http://api.drupal.org/api/function/node_view/7
  foreach ($result as $row) {
    $node = node_load($row->nid);
    $renderable_array['node_list'][] = node_view($node, 'full');
  }
  return $renderable_array;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We need to modify the default node entity info by adding a new view mode to
 * be used in functions like node_view() or node_build_content().
 */
function external_link_d7_entity_info_alter(&$entity_info) {
  // Add our new view mode to the list of view modes...
//  $entity_info['node']['view modes']['external_link_d7_list'] = array(
//    'label' => t('External Link List'),
//    'custom settings' => TRUE,
//  );
}


/**
 * Implements hook_field_formatter_info().
 */
function external_link_d7_field_formatter_info() {
  return array(
//    'external_link_d7_colors' => array(
//      'label' => t('Node Example Color Handle'),
//      'field types' => array('text'),
//    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @todo: We need to provide a formatter for the colors that a user is allowed
 * to enter during node creation.
 */
function external_link_d7_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
//  switch ($display['type']) {
//    case 'external_link_d7_colors':
////      foreach ($items as $delta => $item) {
////        $element[$delta]['#type'] = 'markup';
////        $color = $item['safe_value'];
////        $element[$delta]['#markup'] = theme('external_link_d7_color', array('color' => $color));
////      }
//      break;
//  }

  return $element;
}

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
//function external_link_d7_theme($existing, $type, $theme, $path) {
//  return array(
//    'external_link_d7_color' => array(
//      'variables' => array('color' => NULL),
//    ),
//  );
//}

/**
 * Implements hook_help().
 */
function external_link_d7_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/external_link_d7':
      return "<p>" . t("The Node Example module provides a custom node type.
        You can create new Example Node nodes using the <a href='!nodeadd'>node add form</a>.",
        array('!nodeadd' => url('node/add/external-link'))) . "</p>";
  }
}

/**
 * @} End of "defgroup external_link_d7".
 */
